# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  create_assets:
      runs-on: windows-latest
      steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ifrit-AI/requirements.txt
          pip install pyinstaller
          pip freeze
          python --version
      - uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Create xlsx release
        shell: bash
        run: |
          python --version
          pip freeze
          pyinstaller -n ifrit-xlsx -F --specpath release/build --distpath release --workpath release/build --paths venv/Lib/site-packages main.py;
          cp -r Resources/ release/;
          rm -rf OriginalFiles/decompressed_battle ;
          mkdir -p release/OriginalFiles/;
          cp OriginalFiles/en_battle/battle.* release/OriginalFiles;
          rm -r release/build
          cd ..
      - name: Create ai release
        shell: bash
        run: |
          cd ifrit-AI/
          /opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/pyinstaller/pyinstaller.exe -n ifrit-ai -F --specpath release/build --distpath release --workpath release/build --paths venv/Lib/site-packages --onefile --noconsole --icon=../../Resources/icon.ico main.py;
          mkdir -p release/OriginalFiles/;
          cp -r Resources/ release/;
          cp -r OriginalFiles/ release/;
          rm -r release/build
          cd ..
      - name: Create full release
        shell: bash
        run: |
          mkdir -p release/ifrit-enhanced-0.x; 
          mkdir -p release/ifrit-enhanced-0.x/ifrit-gui;
          mkdir -p release/ifrit-enhanced-0.x/ifrit-ai;
          mkdir -p release/ifrit-enhanced-0.x/ifrit-xlsx;
          cp -R ifrit-ai/release/* release/ifrit-enhanced-0.x/ifrit-ai/;
          cp -R ifrit-xlsx/release/* release/ifrit-enhanced-0.x/ifrit-xlsx/;
          cp -R ifrit-gui/publish/* release/ifrit-enhanced-0.x/ifrit-gui/;
          rm -rf ifrit-ai/release;
          rm -rf ifrit-xlsx/release;
          cd release/ifrit-enhanced-0.x;
          zip a -tzip ../ifrit-enhanced-0.x.zip .;
          cd ..;
          rm -r ifrit-enhanced-0.x
          ls -al
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ifrit-enhanced-*.zip
          path: ${{ github.workspace }}/release
  test:
    needs:
    - create_assets
    runs-on: windows-latest
    steps:
      - name: testprint
        run: |
          echo "[LS]: $(ls -al)"
  release_assets:
    name: Release
    needs:
    - create_assets
    runs-on: windows-latest
    concurrency: release-${{ github.ref }}
    steps:
    - name: Download Files
      uses: actions/download-artifact@v4

    - name: Deploy Package
      if: github.event.ref_type != 'tag' && github.ref == 'refs/heads/master'
      uses: crowbarmaster/GH-Automatic-Releases@latest
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "continuous"
        prerelease: true
        title: "Unstable Build"
        files: |
          ifrit-enhanced-*.zip
